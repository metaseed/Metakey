<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\PublicAssemblies\Microsoft.VisualStudio.Shell.Interop.dll"#>
<#@ Assembly Name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\PublicAssemblies\EnvDTE.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\PublicAssemblies\EnvDTE80.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop"#>
<#
    var stringsFolder = Host.ResolvePath(@"");
#>
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Windows;
using GalaSoft.MvvmLight;

namespace Clipboard.Strings
{
    internal class LanguageManager : ViewModelBase
    {
        #region Fields

        private static LanguageManager _languageManager;
		
<#
    foreach (var folder in Directory.GetDirectories(stringsFolder))
    {
        var directoryInfo = new DirectoryInfo(folder);
#>
        private <#= directoryInfo.Name #>Strings _<#= directoryInfo.Name #> => new <#= directoryInfo.Name #>Strings();
<#
    }
#>

        #endregion

        #region Properties

        /// <summary>
        /// Gets if the text must be written from left to right or from right to left.
        /// </summary>
        public FlowDirection FlowDirection { get; private set; }
<#
    foreach (var folder in Directory.GetDirectories(stringsFolder))
    {
        var directoryInfo = new DirectoryInfo(folder);
#>

        /// <summary>
        /// Gets the <see cref="<#= directoryInfo.Name #>Strings"/>.
        /// </summary>
        public <#= directoryInfo.Name #>Strings <#= directoryInfo.Name #> => _<#= directoryInfo.Name #>;
<#
    }
#>

        #endregion

        #region Methods

        /// <summary>
        /// Gets an instance of <see cref="LanguageManager"/>.
        /// </summary>
        internal static LanguageManager GetInstance()
        {
            return _languageManager ?? (_languageManager = new LanguageManager());
        }

        /// <summary>
        /// Retrieves the current culture.
        /// </summary>
        internal CultureInfo GetCurrentCulture()
        {
            return Thread.CurrentThread.CurrentCulture;
        }

        /// <summary>
        /// Change the current culture of the application
        /// </summary>
        internal void SetCurrentCulture(CultureInfo culture)
        {
            Thread.CurrentThread.CurrentCulture = culture;
            Thread.CurrentThread.CurrentUICulture = culture;
            if (culture.TextInfo.IsRightToLeft)
            {
                FlowDirection = FlowDirection.RightToLeft;
            }
            else
            {
                FlowDirection = FlowDirection.LeftToRight;
            }

            RaisePropertyChanged(string.Empty);
        }

        /// <summary>
        /// Retrieves the list of available culture for this application
        /// </summary>
        /// <returns>A list of available <see cref="CultureInfo"/></returns>
        internal List<CultureInfo> GetAvailableCultures()
        {
            var result = new List<CultureInfo>();
            var rm = Strings.MainWindow.MainWindow.ResourceManager;
            var cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);

            foreach (var culture in cultures)
            {
                if (culture.Equals(CultureInfo.InvariantCulture))
                {
                    continue;
                }

                var rs = rm.GetResourceSet(culture, true, false);
                if (rs != null)
                {
                    result.Add(culture);
                }
            }

            return result;
        }

        #endregion
    }
<#
    // Generate strings classes.

    foreach (var folder in Directory.GetDirectories(stringsFolder))
    {
        var directoryInfo = new DirectoryInfo(folder);
        var resourcesFilePath = Path.Combine(directoryInfo.FullName, directoryInfo.Name + ".resx");

        if (!File.Exists(resourcesFilePath))
        {
            throw new FileNotFoundException(resourcesFilePath);
        }

        using (var reader = new ResXResourceReader(resourcesFilePath))
        {
            reader.UseResXDataNodes = true;
#>

    internal class <#= $"{directoryInfo.Name}Strings" #> : ViewModelBase
    {
        #region Properties
<#
            foreach (DictionaryEntry entry in reader) 
            { 
                var name = entry.Key;
                var node = (ResXDataNode)entry.Value;
                var value = node.GetValue((ITypeResolutionService) null);
#>

        /// <summary>
        /// Gets the resource <#= name #>.
        /// </summary>
        public string <#= name #> => <#= $"{directoryInfo.Name}.{directoryInfo.Name}.{name}" #>;
<#
            }
#>

        #endregion
    }
<#
        }
	}
#>
}
