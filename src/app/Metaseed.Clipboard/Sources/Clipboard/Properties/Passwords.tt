<#@ template debug="false" hostspecific="true" language="C#" #>  
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Security" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Security.Cryptography" #>
<#@ output extension=".cs" #>
<#
    var today = DateTime.Today;
    var stringsFolder = Host.ResolvePath(@"");
    var passwordsFilePath = stringsFolder + @"..\..\..\..\passwords.txt";

    if (!File.Exists(passwordsFilePath))
    {
        throw new FileNotFoundException("Attention, the file \"passwords.txt\" is not found. Please read carefully the \"passwords-sample.txt\" file in the root of the repository.");
    }

    var lineCount = 0;
    var settingsToSecure = new List<Tuple<string, string>>();
    var lines = File.ReadLines(passwordsFilePath);

    foreach (var line in lines)
    {
        lineCount++;
        if (string.IsNullOrWhiteSpace(line) || line.Trim().StartsWith("#") || !line.Contains(":"))
        {
            continue;
        }

        var settingName = line.Split(':').First();
        var settingValue = line.Substring(settingName.Length + 1);

        if (string.IsNullOrWhiteSpace(settingName) || settingName.Contains(" "))
        {
            throw new Exception("The \"passwords.txt\" file looks corrupt lines " + lineCount);
        }

        settingsToSecure.Add(new Tuple<string, string>(settingName, settingValue));
    }

   // this.UpdateAndroidPasswordsFile(settingsToSecure);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clipboard.Properties 
{
    internal partial class Settings 
    {
<#
    foreach (var setting in settingsToSecure)
    {
#>

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<#= EncryptString(ToSecureString(setting.Item2), Version) #>")]
        public string <#= setting.Item1 #> => ((string)(this["<#= setting.Item1 #>"]));
<#
    }
#>
    }
}
<#+

        private string _version;
        string Version {
            get
            {
                if (string.IsNullOrEmpty(_version))
                {
                    _version = GetAssemblyVersion();
                }
        
                return _version;
            }
        }

        public string EncryptString(System.Security.SecureString input, string password)
        {
            using (var rdb = GetSaltKeys(ToSecureString(password)))
            {
                var key = rdb.GetBytes(8);
                var iv = rdb.GetBytes(8);
                using (var algorithm = DES.Create())
                using (var transform = algorithm.CreateEncryptor(key, iv))
                {
                    var inputbuffer = Encoding.Unicode.GetBytes(ToInsecureString(input));
                    var outputBuffer = transform.TransformFinalBlock(inputbuffer, 0, inputbuffer.Length);
                    return ToBase64(outputBuffer);
                }
            }
        }

        internal static string ToBase64(byte[] value)
        {
            return Convert.ToBase64String(value);
        }

        public System.Security.SecureString ToSecureString(string input)
        {
            var secure = new System.Security.SecureString();
            foreach (var c in input)
            {
                secure.AppendChar(c);
            }

            secure.MakeReadOnly();
            return secure;
        }

        public static string ToInsecureString(System.Security.SecureString input)
        {
            string returnValue;
            var ptr = System.Runtime.InteropServices.Marshal.SecureStringToBSTR(input);

            try
            {
                returnValue = System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr);
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(ptr);
            }

            return returnValue;
        }

        public static System.Security.Cryptography.Rfc2898DeriveBytes GetSaltKeys(System.Security.SecureString password)
        {
            return new System.Security.Cryptography.Rfc2898DeriveBytes(ToInsecureString(password), new byte[] { 0x53, 0x69, 0x75, 0x6f, 0x65, 0x20, 0x43, 0x69, 0x61, 0x68, 0x6d, 0x6c, 0x6f, 0x72, 0x64, 0x69, 0x64 });
        }

        string GetAssemblyVersion()
        {
            var stringsFolder = Host.ResolvePath(@"");
            var assemblyInfoFilePath = stringsFolder + @"\AssemblyInfo.cs";
            var date = System.DateTime.UtcNow;

            if (File.Exists(assemblyInfoFilePath))
            {
                var searchedString = $"[assembly: AssemblyVersion(\"{date.Year}.{date.Month}.{date.Day}.";
                var lines = File.ReadAllLines(assemblyInfoFilePath);
                var version = lines.FirstOrDefault(line => line.StartsWith(searchedString));

                if (!string.IsNullOrWhiteSpace(version))
                {
                    var currentRevisionString = version.Replace(searchedString, string.Empty).Replace("\")]", string.Empty);
                    int currentRevision = 0;

                    if (int.TryParse(currentRevisionString, out currentRevision))
                    {
                        return $"{date.Year}.{date.Month}.{date.Day}.{currentRevision}";
                    }
                }
            }

            return $"{date.Year}.{date.Month}.{date.Day}.1";
        }

        void UpdateAndroidPasswordsFile(List<Tuple<string, string>> settingsToSecure)
        {
            var stringsFolder = Host.ResolvePath(@"");
            var androidPasswordsFilePath = stringsFolder + @"..\..\..\..\..\Android\app\src\main\res\values\passwords.xml";

            if (!Directory.Exists(stringsFolder + @"..\..\..\..\..\Android\app\src\main\res\values"))
            {
                throw new DirectoryNotFoundException($"Unable to find the path '{androidPasswordsFilePath}' in the repository.");
            }

            var lines = new List<string>();
            lines.Add("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            lines.Add("<resources>");
            lines.Add("    <!-- This code was generated by a tool. Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. -->");

            foreach (var setting in settingsToSecure)
            {
                lines.Add($"    <string name=\"{setting.Item1}\">{EncryptString(ToSecureString(setting.Item2), Version)}</string>");
            }

            lines.Add("</resources>");

            File.WriteAllLines(androidPasswordsFilePath, lines);
        }
#>
