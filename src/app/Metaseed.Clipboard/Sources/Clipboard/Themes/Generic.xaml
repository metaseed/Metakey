<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Clipboard.ComponentModel.UI.Controls"
                    xmlns:converters="clr-namespace:Clipboard.ComponentModel.UI.Converters" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">

    <converters:ActiveColorSetToSolidColorBrushConverter x:Key="ActiveColorSetToSolidColorBrushConverter" ColorName="SystemAccent"/>
    <converters:BooleanToVerticalAlignmentConverter x:Key="BooleanToVerticalAlignmentConverter"/>
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:WidthToPaneMarginConverter x:Key="WidthToPaneMarginConverter"/>
    <converters:FlowDirectionToStringConverter x:Key="LeftButtonFlowDirectionToStringConverter" LeftToRightValue="&#xE016;" RightToLeftValue="&#xE017;"/>
    <converters:FlowDirectionToStringConverter x:Key="RightButtonFlowDirectionToStringConverter" LeftToRightValue="&#xE017;" RightToLeftValue="&#xE016;"/>

    <Style TargetType="{x:Type controls:BlurredWindow}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{Binding Converter={StaticResource ActiveColorSetToSolidColorBrushConverter}}"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="IsBlurred" Value="True"/>
        <Setter Property="UseAccentColor" Value="Auto"/>
        <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:BlurredWindow}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" SnapsToDevicePixels="true">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid FlowDirection="{Binding RelativeSource={RelativeSource AncestorType=controls:BlurredWindow}, Path=FlowDirection}">
                        <!-- Tiled noise texture -->
                        <Rectangle x:Name="noiseLayer" Opacity="{Binding RelativeSource={RelativeSource AncestorType=controls:BlurredWindow}, Path=NoiseOpacity}">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="/Clipboard;component/Assets/noise.png" TileMode="Tile" Stretch="None" ViewportUnits="Absolute" Viewport="0,0,128,128" RenderOptions.CachingHint="Cache" RenderOptions.BitmapScalingMode="LowQuality"/>
                            </Rectangle.Fill>
                        </Rectangle>

                        <Grid>
                            <ContentPresenter x:Name="windowContent" Grid.Row="1" Content="{Binding}" Focusable="False" ClipToBounds="True" FlowDirection="{Binding RelativeSource={RelativeSource AncestorType=controls:BlurredWindow}, Path=FlowDirection}"/>
                        </Grid>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=controls:BlurredWindow}}" Value="False">
                            <Setter TargetName="noiseLayer" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsBlurRendered, RelativeSource={RelativeSource AncestorType=controls:BlurredWindow}}" Value="False">
                            <Setter TargetName="noiseLayer" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:HamburgerMenuItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource DarkerForegroundBrush}"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="AutomationProperties.Name" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:HamburgerMenuItem}">
                    <Border Background="Transparent">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid Margin="32,0,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="48"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="0">
                                    <ContentPresenter Content="{TemplateBinding Icon}" HorizontalAlignment="Stretch" Width="Auto"/>
                                    <Border x:Name="SelectedBorder" BorderThickness="4,0,0,0" Visibility="Collapsed" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Center" Height="16"/>
                                </Grid>
                                <TextBlock x:Name="TextMenu" Grid.Column="1" Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" Margin="20,0,0,0"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{Binding Converter={StaticResource ActiveColorSetToSolidColorBrushConverter}}"/>
                            <Setter TargetName="TextMenu" Property="FontWeight" Value="Bold"/>
                            <Setter TargetName="SelectedBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Focusable" Value="False">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource HamburgerMenuItemMouseOverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource HamburgerMenuItemMouseOverForeground}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource HamburgerMenuItemMouseOverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                        </MultiDataTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseDown">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="#33FFFFFF"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:TouchTextBox">
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Background" Value="{DynamicResource TouchTextBoxEnabledBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TouchTextBoxEnabledBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="PlaceHolderForeground" Value="{DynamicResource TouchTextBoxDisabledTextBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="TabIndex" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:TouchTextBox">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock x:Name="PlaceHolderTextBlock" Foreground="{TemplateBinding PlaceHolderForeground}" Text="{Binding PlaceHolder, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding AcceptsReturn, Converter={StaticResource BooleanToVerticalAlignmentConverter}, RelativeSource={RelativeSource TemplatedParent}}" Cursor="IBeam" Padding="2,0,0,0"/>
                            <DockPanel LastChildFill="True" FlowDirection="RightToLeft">
                                <Viewbox x:Name="ClearViewbox" HorizontalAlignment="Right" Stretch="Fill" Margin="5,0,5,0" Width="18" Height="18" VerticalAlignment="Center">
                                    <Grid Width="15" Height="15">
                                        <TextBlock Text="&#xE10A;" FontFamily="Segoe MDL2 Assets"/>
                                        <Grid x:Name="ClearClickableZone" Background="Transparent"/>
                                    </Grid>
                                </Viewbox>
                                <ScrollViewer x:Name="PART_ContentHost" FlowDirection="{TemplateBinding FlowDirection}" Focusable="false" Background="Transparent" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" VerticalAlignment="{Binding AcceptsReturn, Converter={StaticResource BooleanToVerticalAlignmentConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxFocusedBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TouchTextBoxOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxFocusedBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TouchTextBoxOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxOverBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TouchTextBoxOverBackground}"/>
                        </Trigger>
                        <Trigger Property="AreAnyTouchesOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxOverBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TouchTextBoxOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxDisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TouchTextBoxDisabledTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="controls:ProgressRing">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ProgressRing">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.Resources>
                            <Style x:Key="ProgressRingEllipseStyle" TargetType="Ellipse">
                                <Setter Property="Opacity" Value="0"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Setter Property="VerticalAlignment" Value="Top"/>
                            </Style>
                        </Border.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="SixthCircle">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Small"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive"/>
                                <VisualState x:Name="Active">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Ring">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E1">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.167" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E2">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.334" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E3">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.501" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E4">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.668" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E5">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.835" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="E6">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.21" Value="1"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.22" Value="0"/>
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:3.47" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E1R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-110"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="10"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="93"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="205"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="357"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="439"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="585"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.167" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E2R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-116"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="4"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="87"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="199"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="351"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="433"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="579"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.334" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E3R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-122"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="-2"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="81"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="193"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="345"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="427"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="573"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.501" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E4R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-128"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="-8"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="75"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="187"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="339"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="421"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="567"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.668" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E5R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-134"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="-14"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="69"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="181"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="331"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="415"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="561"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.835" Storyboard.TargetProperty="Angle" Storyboard.TargetName="E6R">
                                            <SplineDoubleKeyFrame KeySpline="0.13,0.21,0.1,0.7" KeyTime="0" Value="-140"/>
                                            <SplineDoubleKeyFrame KeySpline="0.02,0.33,0.38,0.77" KeyTime="0:0:0.433" Value="-20"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.2" Value="63"/>
                                            <SplineDoubleKeyFrame KeySpline="0.57,0.17,0.95,0.75" KeyTime="0:0:1.617" Value="175"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0.19,0.07,0.72" KeyTime="0:0:2.017" Value="325"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2.783" Value="409"/>
                                            <SplineDoubleKeyFrame KeySpline="0,0,0.95,0.37" KeyTime="0:0:3.217" Value="555"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="Ring" FlowDirection="LeftToRight" MaxWidth="{Binding MaxSideLengthTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" MaxHeight="{Binding MaxSideLengthTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{TemplateBinding Padding}" RenderTransformOrigin=".5,.5" Visibility="Collapsed">
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E1R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E1" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E2R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E2" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E3R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E3" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E4R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E4" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                            <Canvas RenderTransformOrigin=".5,.5">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E5R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E5" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                            <Canvas x:Name="SixthCircle" RenderTransformOrigin=".5,.5" Visibility="Collapsed">
                                <Canvas.RenderTransform>
                                    <RotateTransform x:Name="E6R"/>
                                </Canvas.RenderTransform>
                                <Ellipse x:Name="E6" Fill="{TemplateBinding Foreground}" Height="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{Binding EllipseOffsetTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="{Binding EllipseDiameterTemplateSetting, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:SearchTextBox">
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Background" Value="{DynamicResource TouchTextBoxEnabledBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="TabIndex" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:SearchTextBox">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <DockPanel LastChildFill="True" FlowDirection="RightToLeft">
                            <Viewbox x:Name="ClearViewbox" HorizontalAlignment="Right" Stretch="Fill" Margin="5,0,5,0" Width="18" Height="18" VerticalAlignment="Center">
                                <Grid Width="15" Height="15">
                                    <TextBlock x:Name="ClearTextBlock" Text="&#xE10A;" FontFamily="Segoe MDL2 Assets"/>
                                    <Grid x:Name="ClearClickableZone" Background="Transparent"/>
                                </Grid>
                            </Viewbox>
                            <Viewbox x:Name="SearchViewbox" HorizontalAlignment="Right" Stretch="Fill" Margin="5,0,0,0" Width="18" Height="18" VerticalAlignment="Center">
                                <Grid Width="15" Height="15">
                                    <TextBlock x:Name="SearchTextBlock" Text="&#xE11A;" FontFamily="Segoe MDL2 Assets"/>
                                    <Grid x:Name="SearchClickableZone" Background="Transparent"/>
                                </Grid>
                            </Viewbox>
                            <ScrollViewer x:Name="PART_ContentHost" FlowDirection="{TemplateBinding FlowDirection}" Focusable="false" Background="Transparent" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" VerticalAlignment="{Binding AcceptsReturn, Converter={StaticResource BooleanToVerticalAlignmentConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="ClearTextBlock" Value="{DynamicResource ForegroundBrush}"/>
                            <Setter Property="Foreground" TargetName="SearchTextBlock" Value="{DynamicResource ForegroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource VisualFocusBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource TouchTextBoxOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TouchTextBoxDisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TouchTextBoxDisabledTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="controls:PasteBarToggleButton">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="TabIndex" Value="0"/>
        <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource DarkerForegroundBrush}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="48"/>
        <Setter Property="AutomationProperties.Name" Value="{Binding ToolTip, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PasteBarToggleButton">
                    <Border Background="Transparent">
                        <Grid Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="Auto"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=SecondaryForeground}"/>
                        </Trigger>
                        <Trigger Property="Focusable" Value="False">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource PasteBarListBoxItemMouseOverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PasteBarListBoxItemMouseOverForeground}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource PasteBarListBoxItemMouseOverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PasteBarListBoxItemMouseOverForeground}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ButtonIsPressedBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonIsPressedForeground}"/>
                        </MultiDataTrigger>
                        <EventTrigger RoutedEvent="MouseDown">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetProperty="(ToggleButton.Background).(SolidColorBrush.Color)" To="#33FFFFFF"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:FlipView">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:FlipView">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="ContainerGrid" ClipToBounds="True">
                            <Grid x:Name="ContentGrid" IsManipulationEnabled="True" Background="Transparent" Margin="{Binding ActualWidth, Converter={StaticResource WidthToPaneMarginConverter}, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <ContentControl x:Name="PreviousContent" Grid.Column="0" ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" IsTabStop="False" IsEnabled="False"/>
                                <ContentControl x:Name="CurrentContent" Grid.Column="1" ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" IsTabStop="False"/>
                                <ContentControl x:Name="NextContent" Grid.Column="2" ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" IsTabStop="False" IsEnabled="False"/>
                            </Grid>
                            <Button 
                                Style="{DynamicResource IconButtonStyle}" 
                                Height="64" 
                                Width="64" 
                                VerticalAlignment="Center" 
                                HorizontalAlignment="Left" 
                                FontSize="22" 
                                Content="{Binding FlowDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource LeftButtonFlowDirectionToStringConverter}}" 
                                ToolTip="{Binding Language.MainWindow.FlipView_Previous, RelativeSource={RelativeSource TemplatedParent}}" 
                                AutomationProperties.HelpText="{Binding Language.MainWindow.FlipView_PreviousHelpText, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding CanGoBack, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                Command="{Binding PreviousCommand, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Button 
                                Style="{DynamicResource IconButtonStyle}" 
                                Height="64" 
                                Width="64" 
                                VerticalAlignment="Center" 
                                HorizontalAlignment="Right" 
                                FontSize="22" 
                                Content="{Binding FlowDirection, RelativeSource={RelativeSource Self}, Converter={StaticResource RightButtonFlowDirectionToStringConverter}}" 
                                ToolTip="{Binding Language.MainWindow.FlipView_Next, RelativeSource={RelativeSource TemplatedParent}}" 
                                AutomationProperties.HelpText="{Binding Language.MainWindow.FlipView_NextHelpText, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding CanGoNext, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" 
                                Command="{Binding NextCommand, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:FlipViewIndicator">
        <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:FlipViewIndicator">
                    <ListBox ItemsSource="{Binding FlipView.Items, RelativeSource={RelativeSource TemplatedParent}}" SelectedIndex="{Binding FlipView.SelectedIndex, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding IsInteractionEnabled, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Center" Focusable="False" IsTabStop="False">
                        <ListBox.Template>
                            <ControlTemplate TargetType="ListBox">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ControlTemplate>
                        </ListBox.Template>
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal" IsItemsHost="True"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="Tag" Value="{DynamicResource {x:Static SystemParameters.HighContrastKey}}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                                                <ContentPresenter VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Ellipse x:Name="Ellipse" Height="10" Width="10" Fill="Transparent" Stroke="{DynamicResource FlipViewIndicatorStroke}" StrokeThickness="1"/>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                                        <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource FlipViewIndicatorSelectedBackground}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
